type Hash = {
    salt: string;
    hashedPassword: string;
};
type BinaryToTextEncoding = "base64" | "base64url" | "hex" | "binary";
type HashAlgorithm = "sha256" | "sha512";
type CommonPasswordConfiguration = {
    hashAlgorithm?: HashAlgorithm;
    hashDigest?: BinaryToTextEncoding;
    inSeparator?: string;
};
type SafePasswordConfiguration = {
    hashAlgorithm: HashAlgorithm;
    hashDigest: BinaryToTextEncoding;
    inSeparator: string;
};

/**
 * This function is used to hash a password using the provided salt and configuration, you can provide a configuration to override the default configuration.
 * @param password
 * @param salt
 * @param configuration
 * @returns string
 */
declare function hash(password: string, salt: string, configuration?: CommonPasswordConfiguration | SafePasswordConfiguration): string;
/**
 * This function is used to generate a salt for hashing a password, the salt is used to add complexity to the password hash.
 * @param rounds
 * @returns string
 */
declare function generateSalt(rounds?: number): string;
/**
 * This function is used to verify a password against a hashed password using the configuration provided.
 * @param password
 * @param hashedPassword
 * @param configuration
 * @returns boolean
 */
declare function verify(password: string, hashedPassword: string, configuration?: CommonPasswordConfiguration | SafePasswordConfiguration): boolean;

export { type BinaryToTextEncoding, type CommonPasswordConfiguration, type Hash, type HashAlgorithm, type SafePasswordConfiguration, generateSalt, hash, verify };
